[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "smplx-toolbox"
version = "0.1.0"
description = "A comprehensive collection of developer utilities for working with the SMPL-X human parametric model"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SMPL-X Toolbox Contributors", email = "contact@example.com"}
]
maintainers = [
    {name = "SMPL-X Toolbox Contributors", email = "contact@example.com"}
]
keywords = [
    "smplx", 
    "3d", 
    "human-modeling", 
    "parametric-model", 
    "computer-vision", 
    "graphics",
    "animation",
    "optimization"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
]
requires-python = ">=3.11"
dependencies = [ 
    "rich>=14.1.0,<15", 
    "attrs>=25.3.0,<26", "ipykernel>=6.30.1,<7", "scipy>=1.16.1,<2", "trimesh>=4.8.1,<5", "kornia>=0.8.1,<0.9", "pyvista>=0.46.3,<0.47", "trame>=3.12.0,<4", "trame-vtk>=2.9.1,<3", "pyqt5>=5.15.11,<6",
    # Note: PyTorch is NOT included as a dependency
    # Users must install PyTorch themselves based on their hardware
    # Example: pip install torch torchvision --index-url https://download.pytorch.org/whl/cu126
]

# [project.optional-dependencies]
# # Development dependencies - managed by pixi instead
# dev = [
#     "pytest>=7.0",
#     "pytest-cov>=4.0",
#     "black>=23.0",
#     "isort>=5.0",
#     "flake8>=6.0",
#     "mypy>=1.0",
#     "pre-commit>=3.0"
# ]
# all = [
#     "smplx-toolbox[dev]"
# ]

[project.urls]
Homepage = "https://github.com/yourusername/smplx-toolbox"
Documentation = "https://yourusername.github.io/smplx-toolbox"
Repository = "https://github.com/yourusername/smplx-toolbox"
Issues = "https://github.com/yourusername/smplx-toolbox/issues"

[project.scripts]
smplx-toolbox = "smplx_toolbox.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"smplx_toolbox" = ["py.typed"]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["smplx_toolbox"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "trimesh.*", 
    "cv2.*",
    "open3d.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=smplx_toolbox",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Pixi configuration
[tool.pixi.project]
name = "smplx-toolbox"
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]

[tool.pixi.dependencies]
python = ">=3.11,<3.13"

[tool.pixi.pypi-dependencies]
numpy = "*"
imageio = "*"
opencv-python = "*"
pillow = "*"
tqdm = "*"
pyyaml = "*"
click = "*"
smplx = "*"
# Install the local package in editable mode
smplx-toolbox = { path = ".", editable = true }
pip = "*"  # For installing legacy packages

# Platform-specific PyTorch installation for all environments
[tool.pixi.target.win-64.pypi-dependencies]
torch = {index = "https://download.pytorch.org/whl/cu126"}
torchvision = {index = "https://download.pytorch.org/whl/cu126"}

[tool.pixi.target.linux-64.pypi-dependencies]
torch = {index = "https://download.pytorch.org/whl/cu126"}
torchvision = {index = "https://download.pytorch.org/whl/cu126"}

[tool.pixi.target.osx-64.pypi-dependencies]
torch = {index = "https://download.pytorch.org/whl/cpu"}
torchvision = {index = "https://download.pytorch.org/whl/cpu"}

[tool.pixi.target.osx-arm64.pypi-dependencies]
torch = {index = "https://download.pytorch.org/whl/cpu"}
torchvision = {index = "https://download.pytorch.org/whl/cpu"}
[tool.pixi.feature.dev.pypi-dependencies]
pytest = "*"
pytest-cov = "*"
ruff = "*"
mypy = "*"
pre-commit = "*"

[tool.pixi.environments]
default = {solve-group = "default"}
dev = {features = ["dev"], solve-group = "default"}

[tool.pixi.tasks]
# Development tasks
# Note: install-dev requires pip in the environment
install-dev = "python -m pip install -e . || echo 'Note: Package will be importable via PYTHONPATH'"
test = {cmd = "pytest", env = {PYTHONPATH = "src"}}
test-cov = "pytest --cov=smplx_toolbox --cov-report=html"
lint = "ruff check src tests scripts"
lint-fix = "ruff check --fix src tests scripts"
format = "ruff format src tests scripts"
format-check = "ruff format --check src tests scripts"
type-check = "mypy src"
pre-commit-install = "pre-commit install"
pre-commit-run = "pre-commit run --all-files"

# Setup legacy packages that don't work with modern build systems
# Use --no-build-isolation to avoid issues with chumpy's legacy setup.py
setup-legacy-dev = "pip install --no-build-isolation git+https://github.com/mattloper/chumpy.git"

# Build tasks
build = "python -m build"
clean = "python -c \"import shutil; shutil.rmtree('dist', ignore_errors=True); shutil.rmtree('build', ignore_errors=True)\""

# Quality assurance
qa = {depends-on = ["format-check", "lint", "type-check", "test"]}

# Documentation tasks
docs-serve = "mkdocs serve"
docs-build = "mkdocs build"
doc-server = "pixi run -e dev mkdocs serve"

# Package management
upgrade-deps = "pip list --outdated"

# Quick unit-test runner and artifact viewer for keypoint matching
utest-keypoint-match-run = "pytest -q unittests/fitting/test_keypoint_match.py"
utest-keypoint-match-show = "python scripts/show-keypoint-match.py --input tmp/unittests/fitting/smoke_test_keypoint_match.pkl && python scripts/show-keypoint-match.py --input tmp/unittests/fitting/smoke_test_keypoint_match_vposer.pkl"

# FlowMDM convenience tasks - delegate to FlowMDM environment
# These tasks provide easy access to FlowMDM functionality from the workspace root
# FlowMDM is a motion generation model using diffusion techniques for human motion synthesis

# Install FlowMDM's latest environment with PyTorch 2.7.1+cu126
flowmdm-install = { cmd = "pixi install --manifest-path context/refcode/FlowMDM/pyproject.toml -e latest", description = "Install FlowMDM latest environment" }

# Download SpaCy models and install legacy chumpy package
flowmdm-setup = { cmd = "pixi run --manifest-path context/refcode/FlowMDM/pyproject.toml -e latest setup", description = "Setup FlowMDM environment (SpaCy models and chumpy)" }

# Verify CUDA PyTorch installation and GPU availability
flowmdm-test-cuda = { cmd = "pixi run --manifest-path context/refcode/FlowMDM/pyproject.toml -e latest test-cuda", description = "Test PyTorch CUDA in FlowMDM environment" }

# Quick PyTorch version check
flowmdm-pytorch-version = { cmd = "pixi run --manifest-path context/refcode/FlowMDM/pyproject.toml -e latest pytorch-version", description = "Check PyTorch version in FlowMDM environment" }

# Start interactive shell with FlowMDM environment
flowmdm-shell = { cmd = "pixi shell --manifest-path context/refcode/FlowMDM/pyproject.toml -e latest", description = "Activate FlowMDM shell environment" }

# Run commands in FlowMDM dir - use for FlowMDM scripts that need relative paths
flowmdm-exec = { cmd = "cd context/refcode/FlowMDM && pixi run -e latest", description = "Execute arbitrary command in FlowMDM directory with latest environment. Usage: pixi run flowmdm-exec -- <command>" }

# Run commands in workspace with FlowMDM env - use for workspace files needing FlowMDM libraries
flowmdm-exec-local = { cmd = "pixi run --manifest-path context/refcode/FlowMDM/pyproject.toml -e latest", description = "Execute arbitrary command in current directory with FlowMDM environment. Usage: pixi run flowmdm-exec-local -- <command>" }

# Dataset-specific FlowMDM generation helpers (expanded args; see context/tasks/task-anything.md)
# Generate Babel motion with SMPL/SMPL-X exports into tmp/flowmdm-out/babel
flowmdm-gen-babel = { cmd = "pixi run flowmdm-exec -- python -m runners.generate-ex --model_path ./results/babel/FlowMDM/model001300000.pt --instructions_file ./tests/simple-walk/simple_walk_instructions.json --num_repetitions 1 --bpe_denoising_step 125 --guidance_param 1.5 --dataset babel --export-smpl --export-smplx --smplx-model-path ./body_models --output_dir ../../../tmp/flowmdm-out/babel", description = "Generate Babel motion (SMPL/SMPL-X export) to tmp/flowmdm-out/babel" }

# Generate HumanML3D motion (skeleton/videos) into tmp/flowmdm-out/humanml3d
flowmdm-gen-humanml = { cmd = "pixi run flowmdm-exec -- python -m runners.generate-ex --model_path ./results/babel/FlowMDM/model001300000.pt --instructions_file ./tests/simple-walk/simple_walk_instructions.json --num_repetitions 1 --bpe_denoising_step 125 --guidance_param 1.5 --dataset humanml --output_dir ../../../tmp/flowmdm-out/humanml3d", description = "Generate HumanML3D motion to tmp/flowmdm-out/humanml3d" }

# Show the unified-model animation produced from Babel conversion (multiple backends)
flowmdm-show-babel-anim = { cmd = "pixi run -e dev python scripts/show-animation-unified-model.py --anim-file tmp/flowmdm-out/babel/unified_smpl_animation.pkl --body-models-path data/body_models --backend browser", description = "Show Babel unified SMPL animation (browser backend; pass --port to override). Use -basic/-qt for other backends." }
flowmdm-show-babel-anim-browser = { cmd = "pixi run -e dev python scripts/show-animation-unified-model.py --anim-file tmp/flowmdm-out/babel/unified_smpl_animation.pkl --body-models-path data/body_models --backend browser", description = "Show Babel unified SMPL animation in browser via Trame/VTK (left/right to scrub; optional --port)." }
flowmdm-show-babel-anim-basic = { cmd = "pixi run -e dev python scripts/show-animation-unified-model.py --anim-file tmp/flowmdm-out/babel/unified_smpl_animation.pkl --body-models-path data/body_models --backend basic", description = "Show Babel unified SMPL animation with turntable PyVista controls (left/right stepping)." }
flowmdm-show-babel-anim-qt = { cmd = "pixi run -e dev python scripts/show-animation-unified-model.py --anim-file tmp/flowmdm-out/babel/unified_smpl_animation.pkl --body-models-path data/body_models --backend qt", description = "Show Babel unified SMPL animation with PyVistaQt (turntable controls; requires pyvistaqt/PyQt and XCB)." }

# Show all available FlowMDM tasks and their descriptions
flowmdm-list-tasks = { cmd = "cd context/refcode/FlowMDM && pixi task list -e latest", description = "List all available tasks in FlowMDM latest environment" }

[dependency-groups]
dev = ["tabulate>=0.9.0,<0.10", "pandas>=2.3.2,<3", "mkdocs-material>=9.6.19,<10", "mkdocstrings>=0.30.0,<0.31", "mkdocstrings-python>=1.18.2,<2", "pyqt5>=5.15.11,<6", "trame>=3.12.0,<4", "trame-vtk>=2.9.1,<3", "trame-vuetify>=3.0.3,<4", "ipywidgets>=8.1.7,<9", "pyvista>=0.46.3,<0.47", "pyvistaqt>=0.11.3,<0.12", "pyqt6>=6.9.1,<7", "ipykernel>=6.30.1,<7", "trame-jupyter-extension>=2.1.4,<3", "trame-vtklocal>=0.15.2,<0.16"]

# [dependency-groups]
# dev = [ "ipykernel>=6.30.1,<7", "rich>=14.1.0,<15", "attrs>=25.3.0,<26", "pyvista>=0.46.3,<0.47", "pyvistaqt>=0.11.3,<0.12", "pyqt5>=5.15.11,<6"]
