#!/usr/bin/env python3
"""
SMPL-X Toolbox CLI - Command line interface for the SMPL-X toolbox.
"""

import argparse
import sys
from pathlib import Path

from smplx_toolbox import __version__


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="SMPL-X Toolbox - Developer utilities for SMPL-X human parametric models",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    
    parser.add_argument(
        "--version", 
        action="version", 
        version=f"smplx-toolbox {__version__}"
    )
    
    subparsers = parser.add_subparsers(dest="command", help="Available commands")
    
    # Optimize command
    optimize_parser = subparsers.add_parser("optimize", help="Run parameter optimization")
    optimize_parser.add_argument("input", help="Input data file")
    optimize_parser.add_argument("--output", "-o", help="Output file path")
    optimize_parser.add_argument("--model-path", help="Path to SMPL-X model")
    
    # Convert command
    convert_parser = subparsers.add_parser("convert", help="Convert between formats")
    convert_parser.add_argument("input", help="Input file")
    convert_parser.add_argument("output", help="Output file")
    convert_parser.add_argument("--format", choices=["fbx", "obj", "gltf"], required=True)
    
    # Visualize command
    viz_parser = subparsers.add_parser("visualize", help="Launch interactive visualizer")
    viz_parser.add_argument("input", help="Input model or parameters file")
    viz_parser.add_argument("--model-path", help="Path to SMPL-X model")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
    
    try:
        if args.command == "optimize":
            from smplx_toolbox.cli.optimize import run_optimization
            return run_optimization(args)
        elif args.command == "convert":
            from smplx_toolbox.cli.convert import run_conversion
            return run_conversion(args)
        elif args.command == "visualize":
            from smplx_toolbox.cli.visualize import run_visualizer
            return run_visualizer(args)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
